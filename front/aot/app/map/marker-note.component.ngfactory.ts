/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../app/map/marker-note.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../../app/shared/rest.service';
import * as import9 from '../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import10 from '../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import11 from '../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import12 from '@angular/core/src/change_detection/change_detection_util';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/forms/src/directives/default_value_accessor';
import * as import15 from '@angular/forms/src/directives/control_value_accessor';
import * as import16 from '@angular/forms/src/directives/ng_model';
import * as import17 from '@angular/forms/src/directives/ng_control';
import * as import18 from '@angular/forms/src/directives/ng_control_status';
import * as import19 from '@angular/core/src/security';
export class Wrapper_MarkerNoteComponent {
  /*private*/ _eventHandler:Function;
  context:import0.MarkerNoteComponent;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.MarkerNoteComponent(p0);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_MarkerNoteComponent_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_MarkerNoteComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.MarkerNoteComponent>;
  _MarkerNoteComponent_0_3:Wrapper_MarkerNoteComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MarkerNoteComponent_Host0,renderType_MarkerNoteComponent_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'marker-note',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_MarkerNoteComponent0(this.viewUtils,this,0,this._el_0);
    this._MarkerNoteComponent_0_3 = new Wrapper_MarkerNoteComponent(this.injectorGet(import8.RestService,this.parentIndex));
    this.compView_0.create(this._MarkerNoteComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._MarkerNoteComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.MarkerNoteComponent) && (0 === requestNodeIndex))) { return this._MarkerNoteComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._MarkerNoteComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MarkerNoteComponentNgFactory:import7.ComponentFactory<import0.MarkerNoteComponent> = new import7.ComponentFactory<import0.MarkerNoteComponent>('marker-note',View_MarkerNoteComponent_Host0,import0.MarkerNoteComponent);
const styles_MarkerNoteComponent:any[] = ([] as any[]);
var renderType_MarkerNoteComponent:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_MarkerNoteComponent,{});
export class View_MarkerNoteComponent0 extends import1.AppView<import0.MarkerNoteComponent> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _DefaultValueAccessor_2_3:import9.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_2_4:any[];
  _NgModel_2_5:import10.Wrapper_NgModel;
  _NgControl_2_6:any;
  _NgControlStatus_2_7:import11.Wrapper_NgControlStatus;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _text_9:any;
  /*private*/ _expr_15:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MarkerNoteComponent0,renderType_MarkerNoteComponent,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
    this._expr_15 = import12.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','marker-note-container'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'textarea',new import3.InlineArray2(2,'style','width: 100%; height: 80%;'),(null as any));
    this._DefaultValueAccessor_2_3 = new import9.Wrapper_DefaultValueAccessor(this.renderer,new import13.ElementRef(this._el_2));
    this._NG_VALUE_ACCESSOR_2_4 = [this._DefaultValueAccessor_2_3.context];
    this._NgModel_2_5 = new import10.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_2_4);
    this._NgControl_2_6 = this._NgModel_2_5.context;
    this._NgControlStatus_2_7 = new import11.Wrapper_NgControlStatus(this._NgControl_2_6);
    this._text_3 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_0,'button',new import3.InlineArray4(4,'class','btn btn-primary','style','width: 49%'),(null as any));
    this._text_5 = this.renderer.createText(this._el_4,'Submit',(null as any));
    this._text_6 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,this._el_0,'button',new import3.InlineArray4(4,'class','btn btn-secondary','style','width: 49%'),(null as any));
    this._text_8 = this.renderer.createText(this._el_7,'Cancel',(null as any));
    this._text_9 = this.renderer.createText(this._el_0,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray8(6,'ngModelChange',(null as any),'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_2));
    this._NgModel_2_5.subscribe(this,this.eventHandler(this.handleEvent_2),true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_4,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_4));
    var disposable_2:Function = import3.subscribeToRenderElement(this,this._el_7,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_7));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9
    ]
    ),[
      disposable_0,
      disposable_1,
      disposable_2
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import14.DefaultValueAccessor) && (2 === requestNodeIndex))) { return this._DefaultValueAccessor_2_3.context; }
    if (((token === import15.NG_VALUE_ACCESSOR) && (2 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_2_4; }
    if (((token === import16.NgModel) && (2 === requestNodeIndex))) { return this._NgModel_2_5.context; }
    if (((token === import17.NgControl) && (2 === requestNodeIndex))) { return this._NgControl_2_6; }
    if (((token === import18.NgControlStatus) && (2 === requestNodeIndex))) { return this._NgControlStatus_2_7.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._DefaultValueAccessor_2_3.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_2_1_0:any = this.context.description;
    this._NgModel_2_5.check_model(currVal_2_1_0,throwOnChange,false);
    this._NgModel_2_5.ngDoCheck(this,this._el_2,throwOnChange);
    this._NgControlStatus_2_7.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_15:any = this.context.display;
    if (import3.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      this.renderer.setElementStyle(this._el_0,'display',((this.viewUtils.sanitizer.sanitize(import19.SecurityContext.STYLE,currVal_15) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import19.SecurityContext.STYLE,currVal_15).toString()));
      this._expr_15 = currVal_15;
    }
    this._NgControlStatus_2_7.checkHost(this,this,this._el_2,throwOnChange);
  }
  destroyInternal():void {
    this._NgModel_2_5.ngOnDestroy();
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_2_3.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.description = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.submit()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  handleEvent_7(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.close()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}